set nocompatible              " be iMproved, required
filetype off                  " required
let mapleader = ";"
autocmd!

set runtimepath+=$HOME/.local/share/vim
call vundle#begin('~/.local/share/vim')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'
Plugin 'akhaku/vim-java-unused-imports'
Plugin 'iamcco/markdown-preview.vim'
call vundle#end()            " required
filetype plugin indent on    " required


color default
colorscheme desert
syntax on

set backspace=indent,eol,start
set encoding=utf-8
set expandtab
set foldlevelstart=99 " code folding
set foldmethod=indent
set hidden
set laststatus=2
set noshowmode
set noswapfile
set number
set shiftwidth=4
set shortmess=A
set spell
set spellfile=~/SystemConfig/Config/vim-spell.utf-8.add,~/SystemConfig/Config/vim-spell-programs.add
set spelloptions=camel
set tabpagemax=100
set tabstop=4
set title
set tw=0
set updatetime=1000
set wildignore=*.gc??,*.o
set wildmode=list:longest,full
set viminfo+=n~/.local/share/vim/viminfo

let g:c_syntax_for_h = 1

let g:vundle#bundle_dir = expand('$HOME/.local/share/vim/bundle', 1)
let &titlestring=$SESSION_NAME . "%f"

let g:mkdp_browserfunc = 'OpenBrowser'
let g:mkdp_auto_close = 0

function! OpenBrowser(url)
        execute "! $BROWSER " a:url "& "
endfunction

augroup resCur
  autocmd!
  autocmd BufReadPost * call setpos(".", getpos("'\""))
augroup END

augroup Misc
  autocmd!
  " Resize splits when the window is resized
  au VimResized * :wincmd =
  " Don't enter insert mode for non-modifiable files
  autocmd BufRead * let &l:modifiable = !&readonly
  autocmd BufRead * if &readonly | set nospell
  autocmd BufWritePre * Strip
augroup END

function! UpdateFile()
    execute "silent! keepalt update! " . expand("~/.cache/backup/%:t")
endfunction
augroup Backup
  autocmd!
    " remove temp file on save
    autocmd BufWritePost * silent execute "!rm -f " . expand("~/.cache/backup/%:t")
    " Auto backup on leaving insert
    au InsertLeave * call UpdateFile()
augroup END
" Command to recover file created with above
command! Recover execute "1,$d|0r" expand("~/.cache/backup/%:t")


augroup project
  autocmd!
  autocmd FileType c setlocal makeprg=tcc\ -c\ -o\ /dev/null
  autocmd FileType sh setlocal makeprg=shellcheck\ -e\ SC1090\ -f\ gcc
  autocmd FileType python setlocal makeprg=python-linter
  autocmd FileType json setlocal formatprg=jq\ -r\ .
  autocmd BufEnter * let &l:tags = "./tags_" . &filetype . ";"
  autocmd BufEnter *.c,*.h,*.cpp let &l:tags = "./tags_cpp,./tags_c,tags_c"
  autocmd BufWritePost *.py,*.c,*.h silent execute "!update-tags -f tags_" . &filetype . " " . expand("%") . " --python-kinds=-i --C++-kinds=+p --C-kinds=+p"
  autocmd QuickFixCmdPost [^l]* cwindow
augroup END

function! PadOperand ()
    '<,'>s/\([^ /!+=\-<>{}]\)\([/+-=><!]=\|=\|{\|?\)/\1 \2/ge
    '<,'>s/\([/+-=><!{}]=\|=\|,\|}\|?\)\([^ ,/!+=\-<>:;]\)/\1 \2/ge
    '<,'>s/\([A-z0-9)]\)\([*\-+|&]\)\([(A-z0-9]\)/\1 \2 \3/ge
endfunction
command! -bar -range PadOperand call PadOperand() | call PadOperand()

function! GenerateTags(...)
    if &filetype == "c" && !(a:0 == 1 && a:1 == 1)
        !find . -name "*.[c,h]" -exec tcc -M {} \; | sed -e 's/ \\//' -e '/\.o/d' | sort -u | { while read -r F; do realpath "$F" | sed "s:^$PWD/::"; done }  |  ctags -f tags_c --C-kinds=+p -R -L -
    else
        let type = &filetype
        if type == "cpp" | let type = "c++" | endif
        execute "!ctags -R --languages=" . type . " -f tags_" . &filetype . " --C-kinds=+p  --python-kinds=-i --C++-kinds=+p --exclude='*cov*' --exclude='*doc*' ."
    endif
endfunction
command! GenTags call GenerateTags()
command! GenTagsF call GenerateTags(1)


command! -bar -range FlipEquals s/\([^=>< ]\+\)\(\s*\)=\(\s*\)\([^;]*\)/\4\2=\3\1
command! -bar -range Strip %s/\s\+$//ge
command! -nargs=1 -complete=file T tab drop <args>
command! -nargs=1 -complete=file Tabe tab drop <args>
command! -bar -range -nargs=1 Renum :let @a=<q-args> | '<,'>s/\d\+/\=(@a+setreg('a',@a+1))/g


" It's 2019.
" navigate visual lines
noremap j gj
noremap k gk
noremap gj j
noremap gk k

map ;; <C-w>T
noremap <Space> <C-w>w


function! GitBlame()
    let pos = getpos(".")
    10new | 0r! git blame #
    call setpos(".", pos)
    set filetype=git
    let &l:modifiable=0
    let &l:modified=0
endfunction
command! Gblame call GitBlame()
command! Gshow !git show <cword> #
command! Gdiff !git diff %

noremap <leader>gd :Gdiff<CR>
noremap <leader>gb :Gblame<CR>
noremap <leader>gs :Gshow<CR>
noremap <leader>ga :!git add %<CR>

set grepprg=git\ grep\ -wn\ $*
noremap <leader>gg :silent execute "grep! " . shellescape(expand("<cword>"))<CR>:silent redraw!<CR>

noremap <leader>gcd :cd %:p:h<CR>
noremap <leader>lcd :lcd %:p:h<CR>

noremap <silent> <leader>yy :w !xsel -i -b <CR>
noremap <silent> <leader>pp :r !xsel -b<CR>
noremap <silent> <leader>PP :r !xsel -p<CR>
noremap <silent> <leader>ap :setlocal paste!<CR>:setlocal paste?<CR>

inoremap <c-z> <esc>:suspend<cr>
inoremap kk <C-x><C-o>

onoremap p i(
onoremap b i{


noremap z<space> z=
noremap <leader>z :spellr<CR>

noremap H ^
noremap L $
" gi already moves to "last place you exited insert mode", so we'll map gI to
" something similar: move to last change
nnoremap gI `.

imap jj <Esc>
nnoremap ff gT
nnoremap fg gt

" Function and helpers to print heads of every containing scopes
function! FindScopeHeader()
    let current_line = line(".")
    let dest = ""
    let ifdef_counter = 0
    let last_index_level = indent(current_line)
    let first_label = 0
    while current_line > 1 && last_index_level
        let current_line -= 1
        let line_level = indent(current_line)
        if !empty(getline(current_line)) && getline(current_line) != "{" && line_level < last_index_level || getline(current_line)[0] == "#"
            if getline(current_line)[0] == "#"
                let ifdef_counter += (getline(current_line) == "#endif") *-2 +1
                if ifdef_counter <= 0 | continue | endif
            elseif getline(current_line) !~ " " && getline(current_line)[-1:] == ":"
                if first_label == 0 && line_level == 0
                    let first_label = 1
                else
                    continue
                endif
            else
                let last_index_level = indent(current_line)
            endif
            let dest = trim(getline(current_line)) . " " . dest
        endif
    endwhile
    return dest
endfunction
nnoremap <leader>w   :echom FindScopeHeader()<cr>
