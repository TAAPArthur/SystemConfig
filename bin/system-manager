#!/bin/bash
#================================================================
# HEADER
#================================================================
#%Usage: ${SCRIPT_NAME} ACTION
#% Simple restoration of installed programs
#%
#%
#%Action:
#%    install [groups]              Install the user specified groups. If blank defaults to normal
#%    link                          Link files as specified in .links and .links_root. If the target exists and the files aren't the same, the user will be asked to confirm.
#%    list-groups                   Outputs the list of user defined groups
#%    list-installed                Outputs the list of packages installed than are in a user defined group
#%    list-known                    Outputs the list of packages that are in a user defined group
#%    list-uninstalled              Outputs the list of packages in a user defined group that are not installed
#%    list-unknown                  Outputs the list of packages installed than are not in a user defined group
#%    -h, --help                    Print this help
#%    -v, --version                 Print script information
#%
#%
#================================================================
#- IMPLEMENTATION
#-    version         ${SCRIPT_NAME} (taaparthur.no-ip.org)
#-    author          Arthur Williams
#-    license         MIT
#================================================================
# END_OF_HEADER
#================================================================

set -e

export SYSTEM_CONFIG_DIR=${SYSTEM_CONFIG_DIR:-~/SystemConfig}

export makeopts="-A"

displayHelp(){
    SCRIPT_HEADSIZE=$(head -200 ${0} |grep -n "^# END_OF_HEADER" | cut -f1 -d:)
    SCRIPT_NAME="$(basename ${0})"
    head -${SCRIPT_HEADSIZE:-99} ${0} | grep -e "^#[%+]" | sed -e "s/^#[%+-]//g" -e "s/\${SCRIPT_NAME}/${SCRIPT_NAME}/g" ;
}
displayVersion(){
    echo "0.5.0"
}
safeLn() {
    srcFile=$1
    target=$2
    if diff -qN $srcFile $target; then
        ln -sf $srcFile $target
    else
        ln -si $srcFile $target  </dev/tty
    fi
}

link(){
    cd Config
    for dotFile in .*; do
        echo "DotFile $dotFile"
        if [ $dotFile == "." ] || [ $dotFile == ".." ]; then
            continue
        elif [ -d $dotFile ]; then
            mkdir -p ~/$dotFile
            for config in $dotFile/*; do
                safeLn $config ~/$config
            done
        else
            safeLn $dotFile ~/$dotFile
        fi
    done
}
getAllPackages(){
    $SYSTEM_CONFIG_DIR/bin/packages.sh list-all
}
listGroups(){
    $SYSTEM_CONFIG_DIR/bin/packages.sh list
}

install(){
    echo "Installing $*"
    ${PKG_MANAGER:-sudo pacman} -S $($SYSTEM_CONFIG_DIR/bin/packages.sh get $*) --needed
}

buildCustomPkgs() {
    for pkg in $1/*; do
        (
            cd $pkg
            if [ ! -f  "$(makepkg --packagelist)" ] || [ "$2" == --force ]; then
                makepkg -cfs --skipinteg
            else
                echo "Already built $pkg"
            fi
        )
    done
}
getPackages() {
    if [ -z "$*" ]; then
        args="normal"
    else
        args="$*"
    fi
    $SYSTEM_CONFIG_DIR/bin/packages.sh get $args
}

case "$1" in
    bootstrap)
        shift
        if [ $1 == "--force" ]; then
            force=$1
            shift
        fi
        buildCustomPkgs packages/bootstrap $force
        sudo pacstrap -M -i -C pacman/pacman.conf -U $1 packages/bootstrap/**/*pkg.tar*
        sudo pacstrap -M -i -C pacman/pacman.conf $1 $($SYSTEM_CONFIG_DIR/bin/packages.sh get minimal)
        ;;
    pre-install)
        shift
        buildCustomPkgs packages/normal
        sudo pacstrap -M -C pacman/pacman.conf -U $1 packages/normal/**/*pkg.tar*
        ;;
    get)
        shift
        getPackages $*
        ;;
    install)
        shift
        install $(getPackages $* )
        ;;
     link)
         link
         ;;
     list-groups)
         listGroups
         ;;
     list-installed)
         comm -12 <(pacman -Qqe|sort) <(getAllPackages)
       ;;
     list-uninstalled)
         comm -13 <(pacman -Qqe|sort) <(getAllPackages)
       ;;
     list-known)
        getAllPackages
       ;;
     list-unknown)
         comm -23 <(pacman -Qqe|sort) <(getAllPackages)
       ;;
     clean)
         [[ "$(pacman -Qtdq)" ]] && sudo pacman -Rns $(pacman -Qtdq)
         extra=$(comm -23 <(pacman -Qqe|sort) <(getAllPackages))
         sudo pacman -Rnsu $extra
         ;;
    help|--help|-h)
        displayHelp
        ;;
    version | --version|-v)
        displayVersion
        ;;
    *)
        echo "Unknown args $*"
        displayHelp
        exit 1
        ;;
esac
